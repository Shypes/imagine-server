# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import HitchhikerSource_pb2 as HitchhikerSource__pb2


class HitchhikerSourceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetSourceId = channel.unary_unary(
                '/hitchhikersource.HitchhikerSource/GetSourceId',
                request_serializer=HitchhikerSource__pb2.EmptyRequest.SerializeToString,
                response_deserializer=HitchhikerSource__pb2.SourceIdResponse.FromString,
                )
        self.GetDownloads = channel.unary_unary(
                '/hitchhikersource.HitchhikerSource/GetDownloads',
                request_serializer=HitchhikerSource__pb2.ClientDownloadRequest.SerializeToString,
                response_deserializer=HitchhikerSource__pb2.DownloadListResponse.FromString,
                )
        self.DownloadFile = channel.unary_unary(
                '/hitchhikersource.HitchhikerSource/DownloadFile',
                request_serializer=HitchhikerSource__pb2.DownloadFileRequest.SerializeToString,
                response_deserializer=HitchhikerSource__pb2.DownloadFileResponse.FromString,
                )
        self.MarkDelivered = channel.unary_unary(
                '/hitchhikersource.HitchhikerSource/MarkDelivered',
                request_serializer=HitchhikerSource__pb2.ClientDeliveryRequest.SerializeToString,
                response_deserializer=HitchhikerSource__pb2.DeliveryStatusResponse.FromString,
                )


class HitchhikerSourceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetSourceId(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDownloads(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DownloadFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MarkDelivered(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HitchhikerSourceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetSourceId': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSourceId,
                    request_deserializer=HitchhikerSource__pb2.EmptyRequest.FromString,
                    response_serializer=HitchhikerSource__pb2.SourceIdResponse.SerializeToString,
            ),
            'GetDownloads': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDownloads,
                    request_deserializer=HitchhikerSource__pb2.ClientDownloadRequest.FromString,
                    response_serializer=HitchhikerSource__pb2.DownloadListResponse.SerializeToString,
            ),
            'DownloadFile': grpc.unary_unary_rpc_method_handler(
                    servicer.DownloadFile,
                    request_deserializer=HitchhikerSource__pb2.DownloadFileRequest.FromString,
                    response_serializer=HitchhikerSource__pb2.DownloadFileResponse.SerializeToString,
            ),
            'MarkDelivered': grpc.unary_unary_rpc_method_handler(
                    servicer.MarkDelivered,
                    request_deserializer=HitchhikerSource__pb2.ClientDeliveryRequest.FromString,
                    response_serializer=HitchhikerSource__pb2.DeliveryStatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'hitchhikersource.HitchhikerSource', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class HitchhikerSource(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetSourceId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/hitchhikersource.HitchhikerSource/GetSourceId',
            HitchhikerSource__pb2.EmptyRequest.SerializeToString,
            HitchhikerSource__pb2.SourceIdResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDownloads(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/hitchhikersource.HitchhikerSource/GetDownloads',
            HitchhikerSource__pb2.ClientDownloadRequest.SerializeToString,
            HitchhikerSource__pb2.DownloadListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DownloadFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/hitchhikersource.HitchhikerSource/DownloadFile',
            HitchhikerSource__pb2.DownloadFileRequest.SerializeToString,
            HitchhikerSource__pb2.DownloadFileResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MarkDelivered(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/hitchhikersource.HitchhikerSource/MarkDelivered',
            HitchhikerSource__pb2.ClientDeliveryRequest.SerializeToString,
            HitchhikerSource__pb2.DeliveryStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
